{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>\n",
    "    <h1> ILI-286 - Laboratorio #3 </h1>\n",
    "    <h2> Simulando númericamente sistemas dinámicos </h2>\n",
    "</center>\n",
    "\n",
    "\n",
    "| Nombre | Rol | Email |\n",
    "| :----- | :-- | :---- |\n",
    "| Marco Rojas | 201073005-0 | marco.rojaso@alumnos.usm.cl |\n",
    "| Hernán Vargas | 201073009-3 | hernan.vargas@alumnos.usm.cl |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tabla de contenidos\n",
    "* [Introducción](#intro)\n",
    "* [Desarrollo y analisís de resultados:](#desarrollo)\n",
    "  1. [Simulando Sistemas Caóticos](#se1)\n",
    "  2. [BVP de orden superior](#se2)\n",
    "* [Concluciones](#Concluciones)\n",
    "* [Referencias](#Referencias)\n",
    "* [Anexos](#Anexos) $\\leftarrow$ Comenzar ejecución aquí\n",
    "  * [Métodos implementados](#an1)\n",
    "  * [Métodos paralelos](#an2)\n",
    "  * [Visualización de resultados](#an3)\n",
    "  * [Implementación de diferencias finitas](#an4)\n",
    "  * [Utilidades](#an5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='intro' />\n",
    "## Introducción\n",
    "TODO: write something"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='desarrollo'/>\n",
    "## Desarrollo y analisís de resultados"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='se1'/>\n",
    "## 1.- Simulando Sistemas Caóticos\n",
    "En este laboratorio trabajamos con el Atractor de Lorenz, definido como sigue: \n",
    "\\begin{align} \n",
    "    \\frac{dx}{dt} &= \\sigma (y-x) \\\\\n",
    "    \\frac{dy}{dt} &= x(\\rho-z) -y \\\\\n",
    "    \\frac{dz}{dt} &= xy - \\beta z \n",
    "\\end{align}\n",
    "Además en esta experiencia utilizaremos la configuración $\\sigma=10, \\rho=28, \\beta=\\frac{8}{3}$ donde \n",
    "las trayectorias se vuelven caóticas. Luego podemos escribir nuestra función en python:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def lorenz(t, Y):\n",
    "    return np.array([10*(Y[1] - Y[0]),\n",
    "                    Y[0]*(28 - Y[2]) - Y[1],\n",
    "                    Y[0]*Y[1] - (8/3)*Y[2]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### a) Implementación\n",
    "Ver [anexo 1](#an1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### b) Ejecución\n",
    "Para determinar el maximo $h$ posible debemos tener en cuenta que la región de estabilidad más pequeña\n",
    "es la del método de euler, además, al estar contenida por las demás, basta con satisfacer solo su condición.\n",
    "\n",
    "Primero calculamos el Jacobiano de la función de lorenz (caótica) y obtenemos:\n",
    "$$\n",
    "\\begin{bmatrix}\n",
    "    -10 & 10 & 0 \\\\\n",
    "    28-z_0 & -1 & -x_0 \\\\\n",
    "    y_0 & x_0 & -\\frac{8}{3}\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "Debemos obtener los valores propios de dicha matriz, para determinar el $h$ inicial primero debemos evaluarla\n",
    "en $Y_0 = [x_0, y_0, z_0]$, luego:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "Y_0 = np.array([1,1,1]) # o cualquiera\n",
    "A = np.array([\n",
    "        [-10, 10, 0],\n",
    "        [28-Y_0[2], -1, -Y_0[0]],\n",
    "        [Y_0[1], Y_0[0], -8/3]\n",
    "    ])\n",
    "ev_A = np.linalg.eigvals(A)\n",
    "print(ev_A) # que hago con los positivos?!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Para cada uno de los valores propios y un $h$ se debe cumplir que $|1+\\lambda h| < 1$, sabemos\n",
    "$h>0$ por lo que nos queda $h>\\frac{-2}{\\lambda}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "min(-2/(ev_A))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "t_f = 100\n",
    "h   = 0.01\n",
    "t   = np.linspace(0, t_f, (t_f/h)+1)\n",
    "\n",
    "dataRK4   = RK4_int(lorenz, Y_0, t, h)\n",
    "dataMP    = mp_int(lorenz, Y_0, t, h)\n",
    "dataEuler = euler_int(lorenz, Y_0, t, h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# No resultan los animate D: intenté con la transpuesta tmn.\n",
    "# OJO que cambie el número de frames del código original por que no era int.\n",
    "#animate_lorenz(dataMP, 1)\n",
    "#animate_lorenz(dataRK4, 1)\n",
    "#animate_lorenz(dataMP.T, 1)\n",
    "\n",
    "#Un plot rápido para comprobar que está bien\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.scatter(dataMP[:,0], dataMP[:,1])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### c) Profiling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "t_f = 1000\n",
    "h   = 0.01\n",
    "t   = np.linspace(0, t_f, (t_f/h)+1)\n",
    "#timeit\n",
    "for name in methods:\n",
    "    print(name + \":\")\n",
    "    %timeit methods[name](lorenz, Y_0, t, h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "for name in methods:\n",
    "    print(name + \":\")\n",
    "    %memit methods[name](lorenz, Y_0, t, h)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### d) Análisis de estabilidad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "hs = [0.1, 0.01, 0.005, 0.001]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### e) Implementación paralela\n",
    "Ver [anexo 2](#an2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### f) Simulación de dos trayetorias"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### g) Simulación de veinte trayetorias con RK4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='se2'/>\n",
    "## 2.- BVP de orden superior"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### a) Transformación a IVP acoplado\n",
    "$$ y^{(4)}(x) = -y(x) $$\n",
    "$$ BC: \\{ y(0)= 0, y(2) =1, y'(2)=-1, y''(2)=1 \\} $$\n",
    "\n",
    "Se hace un cambio de variable:\n",
    "$$ y_1 = y$$\n",
    "$$y_2 = y'$$\n",
    "$$y_3 = y''$$\n",
    "$$y_4 = y^{(3)} $$\n",
    "\n",
    "$$ y_1' = y'$$\n",
    "$$y_2 = y''$$\n",
    "$$y_3' = y^{(3)}$$\n",
    "$$y_4' = y^{(4)}$$\n",
    "\n",
    "Finalmente queda como:\n",
    "$$ y_1' = y_2$$\n",
    "$$y_2 = y_3$$\n",
    "$$y_3' = y_4$$\n",
    "$$y_4' = -y_1 $$\n",
    "$$ y_1(0)=0, y_2(0) = \\alpha , y_3(0) = \\beta, y_4(0) = \\gamma $$\n",
    "\n",
    "Donde $\\alpha$, $\\beta$ y $\\gamma$ son valores tales que permiten que $y_1(2) = 1$, $y_2(2)=-1$ y $y_3(2)=1$ con algún algoritmo."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### b) Propuesta de cuarta derivada y discretización\n",
    "Un método que se puede utilizar aprovechando el cambio de variables hecho anteriormente es el Shooting Method. Éste método se puede implementar utilizando algún algoritmo de resolución de IVP como RK4. Para usar RK4 se asignan valores  a $\\alpha, \\beta$ y $\\gamma$ ojalás cercanos a lo que se estima que es la solución. Luego, se debe hacer una búsqueda de ceros para hacer nulo el vector $[y_1(2) - 1, y_2(2) + 1, y_3(2) - 1]$ donde se deben variar los argumentos $\\alpha, \\beta$ y $\\gamma$. La búsqueda de cero en multiples dimensiones se puede hacer con una modificación de Newton-Multivariable. Lamentablemente Newton-Multivariado requiere de las derivadas parciales de la función a integrar, como no podemos derivar el código que vamos a ejecutar, se pueden aproximar las derivadas parciales como lo hace el método de la secante en 1D pero en varias dimensiones."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### c) Implementación de diferencias finitas\n",
    "Ver [Anexo 4](#an4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### d) Ejecución del algoritmo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusiones"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Referencias\n",
    "<div id='ref1'\\> [1] [Título](www.google.com) Títulos sec. *desc*. Revisado xx/xx/xxxx"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "## Anexos\n",
    "Comenzamos cargando los modulos necesarios:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scipy import integrate\n",
    "from matplotlib import pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "from matplotlib.colors import cnames\n",
    "from matplotlib import animation\n",
    "%matplotlib notebook \n",
    "#%matplotlib nbagg\n",
    "%load_ext memory_profiler\n",
    "\n",
    "#IGNORAR WARNINGS    import warnings    warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='an1'\\> \n",
    "### Métodos implementados:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def euler_int(func, y0, t, h):\n",
    "    ys = np.zeros([t.shape[0],y0.shape[0]])\n",
    "    ys[0,:] = y0\n",
    "    for i in range(t.shape[0]-1):\n",
    "        ys[i+1,:] = ys[i,:] + h*func(t[i], ys[i,:])\n",
    "    return ys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def mp_int(func, y0, t, h):\n",
    "    h2 = h/2\n",
    "    ys = np.zeros([t.shape[0],y0.shape[0]])\n",
    "    ys[0,:] = y0\n",
    "    for i in range(t.shape[0]-1):\n",
    "        k1 = ys[i,:] + h2*func(t[i], ys[i,:])\n",
    "        ys[i+1,:] = ys[i,:] + h*func(t[i] + h2 , k1)\n",
    "    return ys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def RK4_int(func, y0, t, h):\n",
    "    h2 = h/2\n",
    "    ys = np.zeros([t.shape[0],y0.shape[0]])\n",
    "    ys[0,:] = y0\n",
    "    for i in range(t.shape[0]-1):\n",
    "        k1 = func(t[i], ys[i,:])\n",
    "        k2 = func(t[i] + h2, ys[i,:] + h2*k1)\n",
    "        k3 = func(t[i] + h2, ys[i,:] + h2*k2)\n",
    "        k4 = func(t[i] + h,  ys[i,:] + h*k3)\n",
    "        ys[i+1,:] = ys[i,:] + (h/6)*(k1 + 2*(k2 + k3) + k4)\n",
    "    return ys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "methods = {\"Euler\": euler_int, \"MidPoint\": mp_int, \"RK4\": RK4_int}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#test 1-D\n",
    "y0 = np.array([1])\n",
<<<<<<< HEAD
    "tf = 4\n",
    "h  = 1\n",
    "t  = np.linspace(0, tf, tf/h+1)\n",
=======
    "yf = 4\n",
    "h  = 0.1\n",
    "t  = np.linspace(0, yf, (yf/h)+1)\n",
>>>>>>> a02b2d9c928ac3b64b6dab9bfc3861bcc77f8363
    "f  = lambda t,y: np.e**t\n",
    "\n",
    "\n",
    "#print(euler_int(f, y0, t, h)[-1,:])\n",
    "#print(mp_int(f, y0, t, h)[-1,:])\n",
    "#print(RK4_int(f, y0, t, h)[-1,:])\n",
    "#print(f(4,0))\n",
    "\n",
    "#print(\"\\n\")\n",
    "\n",
    "#test N-D\n",
    "y02 = np.array([1,2])\n",
<<<<<<< HEAD
    "tf = 4\n",
    "h  = 1\n",
    "t  = np.linspace(0, tf, tf/h+1)\n",
=======
    "yf = 4\n",
    "h  = 0.001\n",
    "t  = np.linspace(0, yf, (yf/h)+1)\n",
>>>>>>> a02b2d9c928ac3b64b6dab9bfc3861bcc77f8363
    "\n",
    "f2 = lambda t,y: np.array([t+y[0], y[1]+y[0]])\n",
    "\n",
    "print(\"Euler\")\n",
    "print(euler_int(f2, y02, t, h)[-1,:])\n",
    "print(\"MP\")\n",
    "print(mp_int(f2, y02, t, h)[-1,:])\n",
    "print(\"RK4\")\n",
    "print(RK4_int(f2, y02, t, h)[-1,:])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='an2'\\> \n",
    "### Métodos paralelos:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def parallel_euler_int(func, y0, t, h):\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def parallel_mp_int(func, y0, t, h):\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def parallel_RK4_int(func, y0, t, h):\n",
    "    pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='an3'\\> \n",
    "### Visualización de resultados"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "-> x_t\n",
    "   arreglo con las posiciones (x,y,z) de las trayectorias. Este puede ser\n",
    "   de dos dimensiones (len(t), 3) para una sola trayectoria, o puede ser \n",
    "   de tres dimensiones (len(t), 3, N_trajectories) para mas de una trayectoria\n",
    "-> N_trajectories\n",
    "   numero de trayectorias a visualizar\n",
    "-> xlim,ylim,zlim\n",
    "   limites en los ejes x,y,z de la animacion\n",
    "-> rotate\n",
    "   rotar mientras anima para mejores perspectivas\n",
    "\"\"\"\n",
    "def animate_lorenz(x_t, N_trajectories, xlim=(-20,70), ylim=(-35,35), zlim=(-35,35), rotate=False):\n",
    "    #setting it to correct format\n",
    "    if x_t.ndim==2:\n",
    "        x_t = np.array([x_t])\n",
    "    elif x_t.ndim==3: \n",
    "        x_t = np.rot90(x_t).T\n",
    "    else:\n",
    "        return -1\n",
    "    #setting the number of frames\n",
    "    frames = max(x_t.shape)\n",
    "    frames /= 2\n",
    "    #set up figure & 3D axis for animation\n",
    "    fig = plt.figure()\n",
    "    ax = fig.add_axes([0, 0, 1, 1], projection='3d')\n",
    "    #ax.axis('off')\n",
    "\n",
    "    #choose a different color for each trajectory\n",
    "    colors = plt.cm.jet(np.linspace(0, 1, N_trajectories))\n",
    "\n",
    "    #set up lines and points\n",
    "    lines = sum([ax.plot([], [], [], '-', c=c)\n",
    "                 for c in colors], [])\n",
    "    pts = sum([ax.plot([], [], [], 'o', c=c)\n",
    "               for c in colors], [])\n",
    "\n",
    "    #prepare the axes limits\n",
    "    ax.set_xlim(xlim)\n",
    "    ax.set_ylim(ylim)\n",
    "    ax.set_zlim(zlim)\n",
    "\n",
    "    #set point-of-view: specified by (altitude degrees, azimuth degrees)\n",
    "    ax.view_init(30, 0)\n",
    "\n",
    "    #initialization function: plot the background of each frame\n",
    "    def init():\n",
    "        for line, pt in zip(lines, pts):\n",
    "            line.set_data([], [])\n",
    "            line.set_3d_properties([])\n",
    "\n",
    "            pt.set_data([], [])\n",
    "            pt.set_3d_properties([])\n",
    "        return lines + pts\n",
    "\n",
    "    #animation function.  This will be called sequentially with the frame number\n",
    "    def animate(i):\n",
    "        # we'll step two time-steps per frame.  This leads to nice results.\n",
    "        i = (2 * i) % x_t.shape[1]\n",
    "\n",
    "        for line, pt, xi in zip(lines, pts, x_t):\n",
    "            x, y, z = xi[:i].T\n",
    "            line.set_data(x, y)\n",
    "            line.set_3d_properties(z)\n",
    "\n",
    "            pt.set_data(x[-1:], y[-1:])\n",
    "            pt.set_3d_properties(z[-1:])\n",
    "\n",
    "        if rotate: ax.view_init(30, 0.3 * i)\n",
    "        fig.canvas.draw()\n",
    "        return lines + pts\n",
    "\n",
    "    #instantiate the animator.\n",
    "    anim = animation.FuncAnimation(fig, animate, init_func=init,\n",
    "                                   #frames=frames, OJO! modifiqué acá\n",
    "                                   frames=int(frames), \n",
    "                                   interval=30, blit=True, repeat=False)\n",
    "    #show it\n",
    "    ax.set_title('Lorenz Simulation')\n",
    "    ax.set_xlabel('x(t)')\n",
    "    ax.set_ylabel('y(t)')\n",
    "    ax.set_zlabel('z(t)')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='an4'\\> \n",
    "### Implementación de diferencias finitas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div id='an5'\\> \n",
    "### Utilidades"
   ]
  }
 ],
 "metadata": {
  "git": {
   "suppress_outputs": true
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
